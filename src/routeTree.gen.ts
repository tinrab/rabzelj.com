/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'
import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as ResourcesIndexRouteImport } from './routes/resources/_index'
import { Route as BlogIndexRouteImport } from './routes/blog/_index'
import { Route as IndexHomeRouteImport } from './routes/_index/_home'
import { Route as ResourcesIndexIndexRouteImport } from './routes/resources/_index.index'
import { Route as IndexHomeIndexRouteImport } from './routes/_index/_home/index'
import { Route as BlogPostPostRouteImport } from './routes/blog/_post/_post'
import { Route as BlogIndexPostsRouteImport } from './routes/blog/_index/_posts'
import { Route as BlogIndexTagsIndexRouteImport } from './routes/blog/_index/tags.index'
import { Route as BlogIndexPostsIndexRouteImport } from './routes/blog/_index/_posts.index'
import { Route as BlogPostPostSlugRouteImport } from './routes/blog/_post/_post.$slug'
import { Route as BlogIndexPostsNotesRouteImport } from './routes/blog/_index/_posts.notes'
import { Route as BlogIndexPostsExternalRouteImport } from './routes/blog/_index/_posts.external'
import { Route as BlogIndexTagsSlugIndexRouteImport } from './routes/blog/_index/tags.$slug.index'
import { ServerRoute as SitemapDotxmlServerRouteImport } from './routes/sitemap[.]xml'
import { ServerRoute as BlogRssDotxmlServerRouteImport } from './routes/blog/rss[.]xml'
import { ServerRoute as ApiImagesFeaturedServerRouteImport } from './routes/api/images/featured'
import { ServerRoute as ApiImagesBlogPostCoverSlugServerRouteImport } from './routes/api/images/blog.post.cover.$slug'

const ResourcesRouteImport = createFileRoute('/resources')()
const BlogRouteImport = createFileRoute('/blog')()
const rootServerRouteImport = createServerRootRoute()

const ResourcesRoute = ResourcesRouteImport.update({
  id: '/resources',
  path: '/resources',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogRoute = BlogRouteImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => rootRouteImport,
} as any)
const ResourcesIndexRoute = ResourcesIndexRouteImport.update({
  id: '/_index',
  getParentRoute: () => ResourcesRoute,
} as any)
const BlogIndexRoute = BlogIndexRouteImport.update({
  id: '/_index',
  getParentRoute: () => BlogRoute,
} as any)
const IndexHomeRoute = IndexHomeRouteImport.update({
  id: '/_index/_home',
  getParentRoute: () => rootRouteImport,
} as any)
const ResourcesIndexIndexRoute = ResourcesIndexIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ResourcesIndexRoute,
} as any)
const IndexHomeIndexRoute = IndexHomeIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => IndexHomeRoute,
} as any)
const BlogPostPostRoute = BlogPostPostRouteImport.update({
  id: '/_post/_post',
  getParentRoute: () => BlogRoute,
} as any)
const BlogIndexPostsRoute = BlogIndexPostsRouteImport.update({
  id: '/_posts',
  getParentRoute: () => BlogIndexRoute,
} as any)
const BlogIndexTagsIndexRoute = BlogIndexTagsIndexRouteImport.update({
  id: '/tags/',
  path: '/tags/',
  getParentRoute: () => BlogIndexRoute,
} as any)
const BlogIndexPostsIndexRoute = BlogIndexPostsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BlogIndexPostsRoute,
} as any)
const BlogPostPostSlugRoute = BlogPostPostSlugRouteImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => BlogPostPostRoute,
} as any)
const BlogIndexPostsNotesRoute = BlogIndexPostsNotesRouteImport.update({
  id: '/notes',
  path: '/notes',
  getParentRoute: () => BlogIndexPostsRoute,
} as any)
const BlogIndexPostsExternalRoute = BlogIndexPostsExternalRouteImport.update({
  id: '/external',
  path: '/external',
  getParentRoute: () => BlogIndexPostsRoute,
} as any)
const BlogIndexTagsSlugIndexRoute = BlogIndexTagsSlugIndexRouteImport.update({
  id: '/tags/$slug/',
  path: '/tags/$slug/',
  getParentRoute: () => BlogIndexRoute,
} as any)
const SitemapDotxmlServerRoute = SitemapDotxmlServerRouteImport.update({
  id: '/sitemap.xml',
  path: '/sitemap.xml',
  getParentRoute: () => rootServerRouteImport,
} as any)
const BlogRssDotxmlServerRoute = BlogRssDotxmlServerRouteImport.update({
  id: '/blog/rss.xml',
  path: '/blog/rss.xml',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiImagesFeaturedServerRoute = ApiImagesFeaturedServerRouteImport.update({
  id: '/api/images/featured',
  path: '/api/images/featured',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiImagesBlogPostCoverSlugServerRoute =
  ApiImagesBlogPostCoverSlugServerRouteImport.update({
    id: '/api/images/blog/post/cover/$slug',
    path: '/api/images/blog/post/cover/$slug',
    getParentRoute: () => rootServerRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/blog': typeof BlogPostPostRouteWithChildren
  '/resources': typeof ResourcesIndexRouteWithChildren
  '/': typeof IndexHomeIndexRoute
  '/resources/': typeof ResourcesIndexIndexRoute
  '/blog/external': typeof BlogIndexPostsExternalRoute
  '/blog/notes': typeof BlogIndexPostsNotesRoute
  '/blog/$slug': typeof BlogPostPostSlugRoute
  '/blog/': typeof BlogIndexPostsIndexRoute
  '/blog/tags': typeof BlogIndexTagsIndexRoute
  '/blog/tags/$slug': typeof BlogIndexTagsSlugIndexRoute
}
export interface FileRoutesByTo {
  '/blog': typeof BlogIndexPostsIndexRoute
  '/resources': typeof ResourcesIndexIndexRoute
  '/': typeof IndexHomeIndexRoute
  '/blog/external': typeof BlogIndexPostsExternalRoute
  '/blog/notes': typeof BlogIndexPostsNotesRoute
  '/blog/$slug': typeof BlogPostPostSlugRoute
  '/blog/tags': typeof BlogIndexTagsIndexRoute
  '/blog/tags/$slug': typeof BlogIndexTagsSlugIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_index/_home': typeof IndexHomeRouteWithChildren
  '/blog': typeof BlogRouteWithChildren
  '/blog/_index': typeof BlogIndexRouteWithChildren
  '/resources': typeof ResourcesRouteWithChildren
  '/resources/_index': typeof ResourcesIndexRouteWithChildren
  '/blog/_index/_posts': typeof BlogIndexPostsRouteWithChildren
  '/blog/_post/_post': typeof BlogPostPostRouteWithChildren
  '/_index/_home/': typeof IndexHomeIndexRoute
  '/resources/_index/': typeof ResourcesIndexIndexRoute
  '/blog/_index/_posts/external': typeof BlogIndexPostsExternalRoute
  '/blog/_index/_posts/notes': typeof BlogIndexPostsNotesRoute
  '/blog/_post/_post/$slug': typeof BlogPostPostSlugRoute
  '/blog/_index/_posts/': typeof BlogIndexPostsIndexRoute
  '/blog/_index/tags/': typeof BlogIndexTagsIndexRoute
  '/blog/_index/tags/$slug/': typeof BlogIndexTagsSlugIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/blog'
    | '/resources'
    | '/'
    | '/resources/'
    | '/blog/external'
    | '/blog/notes'
    | '/blog/$slug'
    | '/blog/'
    | '/blog/tags'
    | '/blog/tags/$slug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/blog'
    | '/resources'
    | '/'
    | '/blog/external'
    | '/blog/notes'
    | '/blog/$slug'
    | '/blog/tags'
    | '/blog/tags/$slug'
  id:
    | '__root__'
    | '/_index/_home'
    | '/blog'
    | '/blog/_index'
    | '/resources'
    | '/resources/_index'
    | '/blog/_index/_posts'
    | '/blog/_post/_post'
    | '/_index/_home/'
    | '/resources/_index/'
    | '/blog/_index/_posts/external'
    | '/blog/_index/_posts/notes'
    | '/blog/_post/_post/$slug'
    | '/blog/_index/_posts/'
    | '/blog/_index/tags/'
    | '/blog/_index/tags/$slug/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexHomeRoute: typeof IndexHomeRouteWithChildren
  BlogRoute: typeof BlogRouteWithChildren
  ResourcesRoute: typeof ResourcesRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/sitemap.xml': typeof SitemapDotxmlServerRoute
  '/blog/rss.xml': typeof BlogRssDotxmlServerRoute
  '/api/images/featured': typeof ApiImagesFeaturedServerRoute
  '/api/images/blog/post/cover/$slug': typeof ApiImagesBlogPostCoverSlugServerRoute
}
export interface FileServerRoutesByTo {
  '/sitemap.xml': typeof SitemapDotxmlServerRoute
  '/blog/rss.xml': typeof BlogRssDotxmlServerRoute
  '/api/images/featured': typeof ApiImagesFeaturedServerRoute
  '/api/images/blog/post/cover/$slug': typeof ApiImagesBlogPostCoverSlugServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/sitemap.xml': typeof SitemapDotxmlServerRoute
  '/blog/rss.xml': typeof BlogRssDotxmlServerRoute
  '/api/images/featured': typeof ApiImagesFeaturedServerRoute
  '/api/images/blog/post/cover/$slug': typeof ApiImagesBlogPostCoverSlugServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths:
    | '/sitemap.xml'
    | '/blog/rss.xml'
    | '/api/images/featured'
    | '/api/images/blog/post/cover/$slug'
  fileServerRoutesByTo: FileServerRoutesByTo
  to:
    | '/sitemap.xml'
    | '/blog/rss.xml'
    | '/api/images/featured'
    | '/api/images/blog/post/cover/$slug'
  id:
    | '__root__'
    | '/sitemap.xml'
    | '/blog/rss.xml'
    | '/api/images/featured'
    | '/api/images/blog/post/cover/$slug'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  SitemapDotxmlServerRoute: typeof SitemapDotxmlServerRoute
  BlogRssDotxmlServerRoute: typeof BlogRssDotxmlServerRoute
  ApiImagesFeaturedServerRoute: typeof ApiImagesFeaturedServerRoute
  ApiImagesBlogPostCoverSlugServerRoute: typeof ApiImagesBlogPostCoverSlugServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/resources': {
      id: '/resources'
      path: '/resources'
      fullPath: '/resources'
      preLoaderRoute: typeof ResourcesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog': {
      id: '/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/resources/_index': {
      id: '/resources/_index'
      path: '/resources'
      fullPath: '/resources'
      preLoaderRoute: typeof ResourcesIndexRouteImport
      parentRoute: typeof ResourcesRoute
    }
    '/blog/_index': {
      id: '/blog/_index'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogIndexRouteImport
      parentRoute: typeof BlogRoute
    }
    '/_index/_home': {
      id: '/_index/_home'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof IndexHomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/resources/_index/': {
      id: '/resources/_index/'
      path: '/'
      fullPath: '/resources/'
      preLoaderRoute: typeof ResourcesIndexIndexRouteImport
      parentRoute: typeof ResourcesIndexRoute
    }
    '/_index/_home/': {
      id: '/_index/_home/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexHomeIndexRouteImport
      parentRoute: typeof IndexHomeRoute
    }
    '/blog/_post/_post': {
      id: '/blog/_post/_post'
      path: ''
      fullPath: '/blog'
      preLoaderRoute: typeof BlogPostPostRouteImport
      parentRoute: typeof BlogRoute
    }
    '/blog/_index/_posts': {
      id: '/blog/_index/_posts'
      path: ''
      fullPath: '/blog'
      preLoaderRoute: typeof BlogIndexPostsRouteImport
      parentRoute: typeof BlogIndexRoute
    }
    '/blog/_index/tags/': {
      id: '/blog/_index/tags/'
      path: '/tags'
      fullPath: '/blog/tags'
      preLoaderRoute: typeof BlogIndexTagsIndexRouteImport
      parentRoute: typeof BlogIndexRoute
    }
    '/blog/_index/_posts/': {
      id: '/blog/_index/_posts/'
      path: '/'
      fullPath: '/blog/'
      preLoaderRoute: typeof BlogIndexPostsIndexRouteImport
      parentRoute: typeof BlogIndexPostsRoute
    }
    '/blog/_post/_post/$slug': {
      id: '/blog/_post/_post/$slug'
      path: '/$slug'
      fullPath: '/blog/$slug'
      preLoaderRoute: typeof BlogPostPostSlugRouteImport
      parentRoute: typeof BlogPostPostRoute
    }
    '/blog/_index/_posts/notes': {
      id: '/blog/_index/_posts/notes'
      path: '/notes'
      fullPath: '/blog/notes'
      preLoaderRoute: typeof BlogIndexPostsNotesRouteImport
      parentRoute: typeof BlogIndexPostsRoute
    }
    '/blog/_index/_posts/external': {
      id: '/blog/_index/_posts/external'
      path: '/external'
      fullPath: '/blog/external'
      preLoaderRoute: typeof BlogIndexPostsExternalRouteImport
      parentRoute: typeof BlogIndexPostsRoute
    }
    '/blog/_index/tags/$slug/': {
      id: '/blog/_index/tags/$slug/'
      path: '/tags/$slug'
      fullPath: '/blog/tags/$slug'
      preLoaderRoute: typeof BlogIndexTagsSlugIndexRouteImport
      parentRoute: typeof BlogIndexRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/sitemap.xml': {
      id: '/sitemap.xml'
      path: '/sitemap.xml'
      fullPath: '/sitemap.xml'
      preLoaderRoute: typeof SitemapDotxmlServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/blog/rss.xml': {
      id: '/blog/rss.xml'
      path: '/blog/rss.xml'
      fullPath: '/blog/rss.xml'
      preLoaderRoute: typeof BlogRssDotxmlServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/images/featured': {
      id: '/api/images/featured'
      path: '/api/images/featured'
      fullPath: '/api/images/featured'
      preLoaderRoute: typeof ApiImagesFeaturedServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/images/blog/post/cover/$slug': {
      id: '/api/images/blog/post/cover/$slug'
      path: '/api/images/blog/post/cover/$slug'
      fullPath: '/api/images/blog/post/cover/$slug'
      preLoaderRoute: typeof ApiImagesBlogPostCoverSlugServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface IndexHomeRouteChildren {
  IndexHomeIndexRoute: typeof IndexHomeIndexRoute
}

const IndexHomeRouteChildren: IndexHomeRouteChildren = {
  IndexHomeIndexRoute: IndexHomeIndexRoute,
}

const IndexHomeRouteWithChildren = IndexHomeRoute._addFileChildren(
  IndexHomeRouteChildren,
)

interface BlogIndexPostsRouteChildren {
  BlogIndexPostsExternalRoute: typeof BlogIndexPostsExternalRoute
  BlogIndexPostsNotesRoute: typeof BlogIndexPostsNotesRoute
  BlogIndexPostsIndexRoute: typeof BlogIndexPostsIndexRoute
}

const BlogIndexPostsRouteChildren: BlogIndexPostsRouteChildren = {
  BlogIndexPostsExternalRoute: BlogIndexPostsExternalRoute,
  BlogIndexPostsNotesRoute: BlogIndexPostsNotesRoute,
  BlogIndexPostsIndexRoute: BlogIndexPostsIndexRoute,
}

const BlogIndexPostsRouteWithChildren = BlogIndexPostsRoute._addFileChildren(
  BlogIndexPostsRouteChildren,
)

interface BlogIndexRouteChildren {
  BlogIndexPostsRoute: typeof BlogIndexPostsRouteWithChildren
  BlogIndexTagsIndexRoute: typeof BlogIndexTagsIndexRoute
  BlogIndexTagsSlugIndexRoute: typeof BlogIndexTagsSlugIndexRoute
}

const BlogIndexRouteChildren: BlogIndexRouteChildren = {
  BlogIndexPostsRoute: BlogIndexPostsRouteWithChildren,
  BlogIndexTagsIndexRoute: BlogIndexTagsIndexRoute,
  BlogIndexTagsSlugIndexRoute: BlogIndexTagsSlugIndexRoute,
}

const BlogIndexRouteWithChildren = BlogIndexRoute._addFileChildren(
  BlogIndexRouteChildren,
)

interface BlogPostPostRouteChildren {
  BlogPostPostSlugRoute: typeof BlogPostPostSlugRoute
}

const BlogPostPostRouteChildren: BlogPostPostRouteChildren = {
  BlogPostPostSlugRoute: BlogPostPostSlugRoute,
}

const BlogPostPostRouteWithChildren = BlogPostPostRoute._addFileChildren(
  BlogPostPostRouteChildren,
)

interface BlogRouteChildren {
  BlogIndexRoute: typeof BlogIndexRouteWithChildren
  BlogPostPostRoute: typeof BlogPostPostRouteWithChildren
}

const BlogRouteChildren: BlogRouteChildren = {
  BlogIndexRoute: BlogIndexRouteWithChildren,
  BlogPostPostRoute: BlogPostPostRouteWithChildren,
}

const BlogRouteWithChildren = BlogRoute._addFileChildren(BlogRouteChildren)

interface ResourcesIndexRouteChildren {
  ResourcesIndexIndexRoute: typeof ResourcesIndexIndexRoute
}

const ResourcesIndexRouteChildren: ResourcesIndexRouteChildren = {
  ResourcesIndexIndexRoute: ResourcesIndexIndexRoute,
}

const ResourcesIndexRouteWithChildren = ResourcesIndexRoute._addFileChildren(
  ResourcesIndexRouteChildren,
)

interface ResourcesRouteChildren {
  ResourcesIndexRoute: typeof ResourcesIndexRouteWithChildren
}

const ResourcesRouteChildren: ResourcesRouteChildren = {
  ResourcesIndexRoute: ResourcesIndexRouteWithChildren,
}

const ResourcesRouteWithChildren = ResourcesRoute._addFileChildren(
  ResourcesRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexHomeRoute: IndexHomeRouteWithChildren,
  BlogRoute: BlogRouteWithChildren,
  ResourcesRoute: ResourcesRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  SitemapDotxmlServerRoute: SitemapDotxmlServerRoute,
  BlogRssDotxmlServerRoute: BlogRssDotxmlServerRoute,
  ApiImagesFeaturedServerRoute: ApiImagesFeaturedServerRoute,
  ApiImagesBlogPostCoverSlugServerRoute: ApiImagesBlogPostCoverSlugServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
